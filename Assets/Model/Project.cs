//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using MySql.Data.MySqlClient;

//TODO: Constructors, all datetime CRUDs, test all CRUD 
namespace Model
{
	[Serializable]
	public class Project
	{
		public Int64 Id { get; set; }
		public string Title { get; set; }
		public DateTime Planned_begin_date { get; set; } //Let's not cut words here to 1 letter) at least start, end
		public DateTime Planned_end_date { get; set; }
		public DateTime Real_begin_date { get; set; }
		public DateTime Real_end_date { get; set; }
		public int State { get; set; }
		public decimal Stated_budget { get; set; } 
		public Int64 Enterprise_id { get; set; }
		public bool isNew { get; private set; }
		
		public virtual ICollection<Team_member> Team_members {get; set;}
		public decimal Expenditures { get; set; }

		public virtual Product Product { get; set; }

		public virtual Project_stage Project_stage { get; set; }
		
		public Project (Int64 id, string title, DateTime planned_begin_date, DateTime planned_end_date,
		                DateTime real_begin_date, DateTime real_end_date, int state, 
		                decimal stated_budget, Int64 enterprise_id, bool isNew)
		{		                
			Title = title;
			Planned_begin_date = planned_begin_date;
			Planned_end_date = planned_end_date;
			Id = id;
			Real_begin_date = real_begin_date;
			Real_end_date = real_end_date;
			State = state;
			Stated_budget = stated_budget;
			this.isNew = isNew;
			Enterprise_id = enterprise_id;
		} 

		public Project(string title, DateTime planned_begin_date, DateTime planned_end_date,
		                decimal stated_budget, bool isNew)
			: this(0, title, planned_begin_date, planned_end_date, new DateTime(), new DateTime(), 0, 
			       stated_budget, 0, isNew)
		{		                
		}

		public void Start()
		{
			this.State = 1;
			this.Real_begin_date = DateTime.Now;
			//Enterprise.Projects.Add (this); ?????????????????????????????????????????/
		}

		public void AppointEmployee(Int64 employee_id, Int64 project_id)
		{
			Team_members.Add (new Team_member(employee_id, project_id, true));
		}

		public void FireEmployee(Int64 employee_id, Int64 project_id)
		{
			Team_members.Remove(new Team_member(employee_id, project_id, false));
			Team_members.Remove(new Team_member(employee_id, project_id, true));
		}

		public void Cancel(MySqlConnection connection)
		{
			Team_members.Clear ();
			this.State = 3;
		}
		///////TROUBLE HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	/*	public void MakeProgress(DateTime salary_payment_date)
		{
						double conception_hours = 0;
						double programming_hours = 0;
						double testing_hours = 0;
						double design_hours = 0;

						foreach (Team_member tm in Team_members) {
				Employee e = Character.Instance.Enterprise.Employees.getEmployeeWithId(tm.Employee_id);
								foreach (Salary_payment sp in e.Salary_payments) {
										int hours_worked = (int)sp.Hours_worked;

										switch (e.Role.Title) {
										case "Analyst":
												{
														conception_hours += (int)hours_worked * e.Qualification;
														break;
												}
										case "Programmer":
												{
														programming_hours += (int)hours_worked * e.Qualification;
														break;
												}
										case "Tester":
												{
														testing_hours += (int)hours_worked * e.Qualification;
														break;
												}
										case "Designer":
												{
														design_hours += (int)hours_worked * e.Qualification;
														break;
												}
										}			
			
								}
						}
				}		*/

		public void Complete(string product_title)
		{
			//Inserting new product
			decimal prime_cost = this.Stated_budget - this.Expenditures;
			double quality = 1 + Convert.ToDouble(prime_cost) / Convert.ToDouble(this.Stated_budget) + 1 + 
				(this.Real_end_date - this.Planned_end_date).TotalDays/(this.Planned_end_date-this.Planned_begin_date).TotalDays;

			Product = new Product (0, product_title, prime_cost,
			                       quality, prime_cost, this.Id, true);

			//Updating prject state to finished
			this.State = 2;
			this.Real_end_date = DateTime.Now;

			//Updating employee qualification
			if (quality > 1) 
			{		
				Dictionary<Int64,double> employeeData = new Dictionary<Int64, double>();
				foreach (Team_member tm in Team_members){
					int hours_worked=0;
					Employee e = null; //Enterprise.getEmployeeWithId(tm.Employee_id);
					foreach (Salary_payment sp in e.Salary_payments){
						hours_worked+=(int)sp.Hours_worked;
					}
					e.Qualification += (hours_worked/(Real_end_date - Real_begin_date).TotalDays)*Product.Quality;
				}	
			}

			//changing enterprise budget
			Asset a1 = new Asset (1, Product.Price, DateTime.Now, Id, false);

			Character.Instance.Enterprise.Balance += Product.Price;
			Character.Instance.Enterprise.Assets.Add (a1);

			//delete team members
			Team_members.Clear();
		}


	}
}